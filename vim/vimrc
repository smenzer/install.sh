"Reload vimrc file: 
":so %
":so $MYVIMRC


"required for vundle
set nocompatible              " be iMproved, required
filetype off                  " required

set shell=/bin/bash
set encoding=utf-8


"""""""""""""""""""""""""""""""""""
" Plugins
"""""""""""""""""""""""""""""""""""
"set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

"let Vundle manage Vundle
"required! 
Plugin 'gmarik/Vundle.vim'

"Install plugins: Launch vim and run :PluginInstall
"To install from command line: vim +PluginInstall +qall
Plugin 'Valloric/MatchTagAlways'		" <Leader>+% to go to matching tag; requires python support
Plugin 'Valloric/YouCompleteMe'			" requires python support
Plugin 'scrooloose/nerdtree'			" ctrl+c to open; shows dir structure
Plugin 'smenzer/nerdcommenter'			" my version has some custom tweaks I like 
Plugin 'scrooloose/syntastic'			" checks syntax of current file
Plugin 'xsbeats/vim-blade'				" syntax highlighting for blade templates 
Plugin 'tpope/vim-surround'				" easily change surroundings of a word or phrase - :help surround
Plugin 'tpope/vim-fugitive'				" git integration - Gblame, Gstatus - :help fugitive
Plugin 'bling/vim-airline'				" enhanced menu bar in the footer
Plugin 'majutsushi/tagbar'				" needed to put current function in status bar; shows an outline of current files functions, classes, etc. - :Tagbar
Plugin 'vim-scripts/a.vim'				" :A to switch. quickly switch between source and header file.  
Plugin 'ahw/vim-pbcopy'					" copy out of vim to the clipboard; set below to leader + y + y
Plugin 'cdmedia/itg_flat_vim'			" Port of the Sublime Text theme itg.flat
Plugin 'pangloss/vim-javascript'		" syntax and indenting for javascript
"Plugin 'kien/ctrlp.vim'					" ctrl+p to open; search and open files
Plugin 'terryma/vim-expand-region'		" Press + to expand the visual selection and - to shrink it
Plugin 'wincent/Command-T'				" <Leader>+t to open; search and open files - <C-v> open split vertical, <C-s> open split, <C-c> close
Plugin 'JSON.vim'						" syntax highlighting for json
Plugin 'phtml.vim'						" syntax highlight for phtml
Plugin 'airblade/vim-gitgutter'			" shows a git diff in the 'gutter' 
"Plugin 'tpope/vim-commentary' " duplicative of nerdcommenter; gc to comment/uncomment
"Plugin 'ack.vim'

call vundle#end()            " required by vundle
filetype plugin indent on    " required by vundle
filetype plugin on  
"""""""""""""""""""""""""""""""""""


"""""""""""""""""""""""""""""""""""
" Syntax and File Settings
"""""""""""""""""""""""""""""""""""

"turn syntax highlighting on
syntax on

"set syntax highlighting for filetypes
au BufNewFile,BufRead *.phtml setlocal ft=php
au BufNewFile,BufRead markdown setlocal ft=markdown
au BufNewFile,BufRead *.json setlocal ft=json
au BufNewFile,BufRead *.blade.php setlocal ft=html 
au BufNewFile,BufRead *.ejs setlocal filetype=html
au BufNewFile,BufRead *.spec.template setlocal filetype=spec

"make javascript use jQuery code style
au FileType javascript setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2

"set json syntax options
au FileType json setlocal foldmethod=syntax formatoptions=tcq2l autoindent textwidth=78 shiftwidth=2 softtabstop=4 tabstop=8  expandtab

" for C-like programming, have automatic indentation:
au FileType c,cpp,slang,make,automake setlocal cindent noexpandtab shiftwidth=8 tabstop=8 softtabstop=8

"for actual C (not C++) programming where comments have explicit end
"characters, if starting a new line in the middle of a comment automatically
"insert the comment leader characters:
autocmd FileType c setlocal formatoptions+=ro

"for HTML, generally format text, but if a long line has been created leave it
"alone when editing:
autocmd FileType html setlocal formatoptions+=tl

"for both CSS and HTML, use genuine tab characters for indentation, to make
"files a few bytes smaller:
autocmd FileType html,css setlocal noexpandtab tabstop=4 softtabstop=4 shiftwidth=4

"in makefiles, don't expand tabs to spaces, since actual tab characters are
"needed, and have indentation at 8 chars to be sure that all indents are tabs
"(despite the mappings later):
autocmd FileType make setlocal noexpandtab shiftwidth=8 tabstop=8 softtabstop=8
"""""""""""""""""""""""""""""""""""
 

"""""""""""""""""""""""""""""""""""
" set general vim options
"""""""""""""""""""""""""""""""""""
set modelines=0 
set autoindent  
set smartindent  
set incsearch  
set showmatch  
set hlsearch
set showcmd
set showmode
set number  
set ruler
set cursorline
set tabstop=4  
set softtabstop=4  
set shiftwidth=4  
set shiftround
set noexpandtab  
set ttyfast
set textwidth=0
set wildmenu
set wildmode=list:longest
set wildignore+=*Zend*,.git,*bundles*,*.o,*.obj,*.so*
set shortmess+=I
set wrap
set linebreak
set mouse=a "press option+mouse to be able to copy out of terminal
set backspace=indent,eol,start
set scrolloff=6
set laststatus=2

"make searches case-insensitive, unless they contain upper-case letters:
set ignorecase
set smartcase

"move backup and swap files from working directory
set nobackup
set noswapfile

"folding settings
set foldmethod=indent   " fold based on indent
set foldnestmax=10      " deepest fold is 10 levels
set nofoldenable        " dont fold by default
set foldlevel=1         " set default fold level to 1

"Not supported until version 7.3
if version >= 703
	" highlight the 80th column
	set colorcolumn=80
	highlight ColorColumn ctermbg=8
endif
"""""""""""""""""""""""""""""""""""


"""""""""""""""""""""""""""""""""""
" VIM Key Mappings
"""""""""""""""""""""""""""""""""""
let mapleader = ","

map <leader>a :set wrap!<CR>
map <leader>k :nohlsearch<CR>  
map <leader>n :set number!<CR>
map <leader>p :set paste!<CR>
map <leader>q :wqa<CR>
map <leader>w :w<CR>

"format entire file
nnoremap <leader>f gg=G 

"Type 12<Enter> to go to line 12 (12G breaks my wrist)
"Hit Enter to go to end of file.
nnoremap <CR> G
"Hit Backspace to go to beginning of file.
"nnoremap <BS> gg

"Automatically jump to end of text you pasted:
"I can paste multiple lines multiple times with simple ppppp.
vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]

"Stop that stupid window from popping up:
map q: :q

"smarter splitting - buffer
nmap <leader>s<left>	:leftabove	vnew<CR>
nmap <leader>s<right>	:rightbelow vnew<CR>
nmap <leader>s<up>		:leftabove	new<CR>
nmap <leader>s<down>	:rightbelow new<CR>

"smarter splitting - window
nmap <leader>sw<left>  :topleft  vnew<CR>
nmap <leader>sw<right> :botright vnew<CR>
nmap <leader>sw<up>    :topleft  new<CR>

"Easier splits navigation - Remapped Caps Lock to Control    
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

"set all panes equal size
map <leader>= <c-w>=

"easier splits sizing
noremap <C-w><left> 10<C-w><  
noremap <C-w><right> 10<C-w>> 
noremap <C-w><up> 10<C-w>+
noremap <C-w><down> 10<C-w>-

"tabs
"gt (next tab), gT (previous tab), {i}gt (tab in position i)
nnoremap <leader>T	:tabnew<CR>
"""""""""""""""""""""""""""""""""""


"""""""""""""""""""""""""""""""""""
" Plugin Settings and Key Mappings
"""""""""""""""""""""""""""""""""""

"** MatchTagAlways **
nnoremap <leader>% :MtaJumpToOtherTag<cr>

"** PBCopy **
"map from cy to <leader>y
map <leader>y cy<CR>

"** Vim Expand Region **
"map expand regions
" Hit v to select one character
" Hit vagain to expand selection to word
" Hit v again to expand to paragraph
" ...
" Hit <C-v> go back to previous selection if I went too far
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

"** Command-T **
let g:CommandTWildIgnore=&wildignore . ",**/bower_components/*" 
let g:CommandTScanDotDirectories = 1
let g:CommandTAlwaysShowDotFiles = 1
let g:CommandTAcceptSelectionSplitMap = '<C-s>'

"** YouCompleteMe **
let g:ycm_confirm_extra_conf = 0 " don't ask about loading the config

"** ctags **
map <silent> <F12> :!ctags -R --sort=yes --c++-kinds=+p --fields=+iaS --extra=+q .<CR>
set tags+=./tags;$HOME

"** Tagbar **
map <F3> :Tagbar<cr>

"** Nerdtree ** 
let NERDTreeQuitOnOpen=1  
map <C-c> :NERDTreeToggle<CR>  

"** Syntastic **
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_aggregate_errors = 1
let g:syntastic_mode_map = {
	\ "mode": "active",
	\ "passive_filetypes": ["html"]
	\ }

let g:syntastic_php_checkers = ["php", "phpcs", "phpmd", "phplint"]
"let g:syntastic_html_checkers = ["w3"]

map <leader>E :SyntasticCheck<CR>
map <leader>e :Errors<CR>
map <leader>r :lclose<CR>
"""""""""""""""""""""""""""""""""""


"""""""""""""""""""""""""""""""""""
" VIM Display Options **
"""""""""""""""""""""""""""""""""""

"set colorscheme 
"(silent so we don't get a warning when we initialize a new machine)
silent! colorscheme itg_flat


"** Airline configuration **
if !exists('g:airline_symbols')
	let g:airline_symbols = {}
endif

let g:airline_left_sep='»'
"let g:airline_left_sep='▶'
let g:airline_right_sep='«'
"let g:airline_right_sep='◀'

"* enable/disable automatic population of the `g:airline_symbols` dictionary with powerline symbols
let g:airline_powerline_fonts=0

"* set the airline theme (https://github.com/bling/vim-airline/wiki/Screenshots)
let g:airline_theme='murmur'

"enable tabline at the top
let g:airline#extensions#tabline#enabled = 1

" Optionally configure individual sections 
"let g:airline_section_b = '%f %{fugitive#statusline()} %h%m%r%w' " path/filename, help flag, modified flag, readonly flag, preview flag
"let g:airline_section_c = '%t' "filename 
"let g:airline_section_y = ''
"let g:airline_section_gutter = ''
"let g:airline_section_warning = '%#warningmsg# %{SyntasticStatuslineFlag()} %*'
"""""""""""""""""""""""""""""""""""
