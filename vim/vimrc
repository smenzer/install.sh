" required for vundle
set nocompatible              " be iMproved, required
filetype off                  " required

set shell=/bin/bash
set encoding=utf-8

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle
" required! 
Plugin 'gmarik/Vundle.vim'

" all plugins get declared here
"Plugin 'Valloric/MatchTagAlways' " requires python support
"Plugin 'Valloric/YouCompleteMe' " requires python support
Plugin 'scrooloose/nerdtree'
Plugin 'smenzer/nerdcommenter' " my version has some custom tweaks I like 
Plugin 'scrooloose/syntastic'
Plugin 'xsbeats/vim-blade'
Plugin 'tpope/vim-surround'
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
Plugin 'bling/vim-airline'
Plugin 'vim-scripts/a.vim'
Plugin 'rentalcustard/pbcopy.vim'
Plugin 'cdmedia/itg_flat_vim'
Plugin 'pangloss/vim-javascript'

Plugin 'ack.vim'
Plugin 'JSON.vim'
"Plugin 'html.vim'
Plugin 'phtml.vim'
"Plugin 'javascript.vim'

call vundle#end()            " required by vundle
filetype plugin indent on    " required by vundle
filetype plugin on  


"call pathogen#runtime_append_all_bundles()
"execute pathogen#infect()
"call pathogen#helptags()

"Reload vimrc file: 
":so %
":so $MYVIMRC

" move backup and swap files from working directory
set backupdir=~/terminal/vim/.vim_backup/
set directory=~/terminal/vim/.vim_swap/

syntax on

"https://github.com/cdmedia/itg_flat_vim
colorscheme itg_flat

"set syntax highlighting for filetypes
"au BufNewFile,BufRead *.phtml setlocal ft=php
au BufNewFile,BufRead markdown setlocal ft=markdown
au BufNewFile,BufRead *.json setlocal ft=json
"au BufNewFile,BufRead *.blade.php setlocal ft=html 
au BufNewFile,BufRead *.ejs setlocal filetype=html
au BufNewFile,BufRead *.spec.template setlocal filetype=spec

"make javascript use jQuery code style
au FileType javascript setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2

"set json syntax options
au FileType json setlocal foldmethod=syntax formatoptions=tcq2l autoindent textwidth=78 shiftwidth=2 softtabstop=4 tabstop=8  expandtab

" for C-like programming, have automatic indentation:
au FileType c,cpp,slang,make,automake setlocal cindent noexpandtab shiftwidth=8 tabstop=8 softtabstop=8

" for actual C (not C++) programming where comments have explicit end
" characters, if starting a new line in the middle of a comment automatically
" insert the comment leader characters:
autocmd FileType c setlocal formatoptions+=ro

" for HTML, generally format text, but if a long line has been created leave it
" alone when editing:
autocmd FileType html setlocal formatoptions+=tl

" for both CSS and HTML, use genuine tab characters for indentation, to make
" files a few bytes smaller:
autocmd FileType html,css setlocal noexpandtab tabstop=4 softtabstop=4 shiftwidth=4

" in makefiles, don't expand tabs to spaces, since actual tab characters are
" needed, and have indentation at 8 chars to be sure that all indents are tabs
" (despite the mappings later):
autocmd FileType make setlocal noexpandtab shiftwidth=8 tabstop=8 softtabstop=8
 

" set general vim options
set modelines=0
set autoindent  
set smartindent  
set incsearch  
set showmatch  
set hlsearch
set showcmd
set showmode
set number  
set ruler
set cursorline
set tabstop=4  
set softtabstop=4  
set shiftwidth=4  
set shiftround
set noexpandtab  
set ttyfast
set textwidth=0
set wildmenu
set wildmode=list:longest
set wildignore+=*Zend*,.git,*bundles*
set shortmess+=I
set wrap
set linebreak
set mouse=a
set backspace=indent,eol,start
set scrolloff=3
set laststatus=2

" Not supported until version 7.3
if version >= 703
	set colorcolumn=80
	highlight ColorColumn ctermbg=8
endif

" make searches case-insensitive, unless they contain upper-case letters:
set ignorecase
set smartcase

"set formatoptions=qrn1
"set formatoptions+=l

" folding settings
set foldmethod=indent   " fold based on indent
set foldnestmax=10      " deepest fold is 10 levels
set nofoldenable        " dont fold by default
set foldlevel=1         " set default fold level to 1


"nnoremap <CR> <C-^>  
"nnoremap <C-w> :w<CR>

let mapleader = ","

map <leader>a :set wrap!<CR>
map <leader>k :nohlsearch<CR>  
map <leader>l :source ~/.vimrc<CR>
map <leader>n :set number!<CR>
map <leader>o :only<CR>
map <leader>p :set paste!<CR>
map <leader>q :wqa<CR>
map <leader>s :setlocal spell!<CR>
map <leader>V :e ~/.vimrc<CR>
map <leader>w :w<CR>

"PBCopy the selected text
map <leader>y y :PBCopy<CR> 

"format entire file
nnoremap <Leader>f gg=G 

lnoremap <leader>, <ESC>
noremap <leader>, <ESC>

" smarter splitting - buffer
nmap <leader>s<left>	:leftabove	vnew<CR>
nmap <leader>s<right>	:rightbelow vnew<CR>
nmap <leader>s<up>		:leftabove	new<CR>
nmap <leader>s<down>	:rightbelow new<CR>
" smarter splitting - window
 nmap <leader>sw<left>  :topleft  vnew<CR>
 nmap <leader>sw<right> :botright vnew<CR>
 nmap <leader>sw<up>    :topleft  new<CR>
 nmap <leader>sw<down>  :botright new<CR>

"Easier splits navigation - Remapped Caps Lock to Control    
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" set all panes equal size
map <leader>= <c-w>=

" easier splits sizing
noremap <C-w><left> 10<C-w><  
noremap <C-w><right> 10<C-w>> 
noremap <C-w><up> 10<C-w>+
noremap <C-w><down> 10<C-w>-

"let g:gist_open_browser_after_post = 1
"let g:gist_browser_command = 'ssh local open %URL%'


"""""""""""""""""""""""""""""""""""
" nerdtree settings 
"""""""""""""""""""""""""""""""""""
let NERDTreeQuitOnOpen=1  
map <C-c> :NERDTreeToggle<CR>  

"""""""""""""""""""""""""""""""""""
" airline status line configuration
"""""""""""""""""""""""""""""""""""
if !exists('g:airline_symbols')
	let g:airline_symbols = {}
endif

"* the separator used on the left side 
"default >
"  let g:airline_left_sep='»'
let g:airline_left_sep='▶'

"* the separator used on the right side
"default <
"  let g:airline_right_sep='«'
let g:airline_right_sep='◀'

"* enable modified detection 
"default 1
let g:airline_detect_modified=1

"* enable paste detection 
"default 1
let g:airline_detect_paste=1

"* enable iminsert detection 
"default 0
let g:airline_detect_iminsert=0

"* determine whether inactive windows should have the left section collapsed to only the filename of that buffer.
"default 1
let g:airline_inactive_collapse=1

"* enable/disable automatic population of the `g:airline_symbols` dictionary with powerline symbols. 
"default 0
let g:airline_powerline_fonts=0

" here is an example of how you could replace the branch indicator with
" the current working directory, followed by the filename.
let g:airline_section_b = '%f %h%m%r%w' "path/filename, help flag, modified flag, readonly flag, preview flag
let g:airline_section_c = '%t' "filename 
let g:airline_section_y = ''
let g:airline_section_warning = '%#warningmsg# %{SyntasticStatuslineFlag()} %*'



"""""""""""""""""""""""""""""""""""
" syntastic settings
"""""""""""""""""""""""""""""""""""
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_aggregate_errors = 1
let g:syntastic_mode_map = {
	\ "mode": "active",
	\ "passive_filetypes": ["html"]
	\ }

let g:syntastic_php_checkers = ["php", "phpcs", "phpmd", "phplint"]
"let g:syntastic_html_checkers = ["w3"]

map <leader>E :SyntasticCheck<CR>
map <leader>e :Errors<CR>
map <leader>r :lclose<CR>

